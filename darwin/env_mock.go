// Code generated by MockGen. DO NOT EDIT.
// Source: env.go

// Package darwin is a generated GoMock package.
package darwin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetaData is a mock of MetaData interface
type MockMetaData struct {
	ctrl     *gomock.Controller
	recorder *MockMetaDataMockRecorder
}

// MockMetaDataMockRecorder is the mock recorder for MockMetaData
type MockMetaDataMockRecorder struct {
	mock *MockMetaData
}

// NewMockMetaData creates a new mock instance
func NewMockMetaData(ctrl *gomock.Controller) *MockMetaData {
	mock := &MockMetaData{ctrl: ctrl}
	mock.recorder = &MockMetaDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetaData) EXPECT() *MockMetaDataMockRecorder {
	return m.recorder
}

// MockEnv is a mock of Env interface
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// Fit mocks base method
func (m *MockEnv) Fit(ch Chromosome) (float64, MetaData) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fit", ch)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(MetaData)
	return ret0, ret1
}

// Fit indicates an expected call of Fit
func (mr *MockEnvMockRecorder) Fit(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fit", reflect.TypeOf((*MockEnv)(nil).Fit), ch)
}
